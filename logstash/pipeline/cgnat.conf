input {
  # Syslog TCP
  syslog {
    port => 5514
    type => "cgnat"
    codec => plain
  }
  
  # Syslog UDP (opcional)
  udp {
    port => 5514
    type => "cgnat"
    codec => plain
  }
}

filter {
  if [type] == "cgnat" {
    
    # Parse do cabeçalho syslog
    grok {
      match => { 
        "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{IPORHOST:syslog_server} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" 
      }
      add_field => { "received_at" => "%{@timestamp}" }
    }

    # Parse específico por vendor
    if [syslog_program] =~ /hillstone|cgnat/ {
      # Hillstone CGNAT format
      grok {
        patterns_dir => ["/usr/share/logstash/patterns"]
        match => { 
          "syslog_message" => "%{HILLSTONE_CGNAT}" 
        }
        tag_on_failure => ["_grok_hillstone_failed"]
      }
    } else if [syslog_program] =~ /mikrotik|routeros/ {
      # MikroTik format
      grok {
        patterns_dir => ["/usr/share/logstash/patterns"]
        match => { 
          "syslog_message" => "%{MIKROTIK_SRCNAT}" 
        }
        tag_on_failure => ["_grok_mikrotik_failed"]
      }
    } else {
      # Generic key=value format
      kv {
        source => "syslog_message"
        field_split => " "
        value_split => "="
        target => "kv"
      }
      
      # Mapear campos genéricos
      if [kv][orig] {
        grok {
          match => { "[kv][orig]" => "%{IP:source_ip}:%{POSINT:source_port}" }
        }
      }
      
      if [kv][trans] {
        grok {
          match => { "[kv][trans]" => "%{IP:nat_ip}:%{POSINT:nat_port}" }
        }
      }
      
      if [kv][dst] {
        grok {
          match => { "[kv][dst]" => "%{IP:dest_ip}:%{POSINT:dest_port}" }
        }
      }
    }

    # Normalizar campos para ECS
    if [source_ip] {
      mutate {
        add_field => {
          "[source][ip]" => "%{source_ip}"
          "[source][port]" => "%{source_port}"
        }
      }
    }
    
    if [nat_ip] {
      mutate {
        add_field => {
          "[source][nat][ip]" => "%{nat_ip}"
          "[source][nat][port]" => "%{nat_port}"
        }
      }
    }
    
    if [dest_ip] {
      mutate {
        add_field => {
          "[destination][ip]" => "%{dest_ip}"
          "[destination][port]" => "%{dest_port}"
        }
      }
    }

    # Protocolo
    if [proto] {
      if [proto] == "6" or [proto] =~ /tcp/i {
        mutate {
          add_field => {
            "[network][transport]" => "tcp"
            "[network][iana_number]" => "6"
          }
        }
      } else if [proto] == "17" or [proto] =~ /udp/i {
        mutate {
          add_field => {
            "[network][transport]" => "udp"
            "[network][iana_number]" => "17"
          }
        }
      }
    }

    # Campos ECS obrigatórios
    mutate {
      add_field => {
        "[event][category]" => "network"
        "[event][kind]" => "event"
        "[event][dataset]" => "cgnat"
        "[event][timezone]" => "America/Sao_Paulo"
      }
    }

    # Observer (equipamento que gerou o log)
    if [syslog_server] {
      mutate {
        add_field => {
          "[observer][hostname]" => "%{syslog_server}"
          "[observer][type]" => "firewall"
        }
      }
    }

    # Sessão e usuário (se disponíveis)
    if [sess] or [session] {
      mutate {
        add_field => {
          "[cgnat][session][id]" => "%{[sess]}%{[session]}"
        }
      }
    }
    
    if [user] or [username] {
      mutate {
        add_field => {
          "[user][name]" => "%{[user]}%{[username]}"
        }
      }
    }

    # Parse do timestamp
    if [syslog_timestamp] {
      date {
        match => [ "syslog_timestamp", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
        timezone => "America/Sao_Paulo"
      }
    }

    # Converter tipos
    mutate {
      convert => {
        "[source][port]" => "integer"
        "[source][nat][port]" => "integer"
        "[destination][port]" => "integer"
        "[network][iana_number]" => "integer"
      }
    }

    # Limpar campos temporários
    mutate {
      remove_field => [
        "source_ip", "source_port", "nat_ip", "nat_port", 
        "dest_ip", "dest_port", "proto", "sess", "session",
        "user", "username", "kv", "syslog_message"
      ]
    }
  }
}

output {
  if [type] == "cgnat" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:elasticsearch:9200}"]
      user => "${ELASTICSEARCH_USERNAME:elastic}"
      password => "${ELASTICSEARCH_PASSWORD:changeme}"
      index => "cgnat-logs-%{+YYYY.MM.dd}"
    }
  }

  # Debug output (remover em produção)
  if "_grok" in [tags] {
    stdout {
      codec => rubydebug
    }
  }
}